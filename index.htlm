<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple P2P Chat</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .chat-container {
            background: white;
            border-radius: 15px;
            padding: 30px;
            width: 100%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }

        .status {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: bold;
        }

        .status.disconnected { background: #fee; color: #c53030; }
        .status.connecting { background: #fffaf0; color: #d69e2e; }
        .status.connected { background: #f0fff4; color: #38a169; }

        .messages {
            height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 8px;
            background: #f9f9f9;
        }

        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 15px;
            max-width: 80%;
        }

        .message.sent {
            background: #667eea;
            color: white;
            margin-left: auto;
            text-align: right;
        }

        .message.received {
            background: #e2e8f0;
            color: #333;
        }

        .message.system {
            background: #fed7d7;
            color: #c53030;
            text-align: center;
            margin: 0 auto;
            font-style: italic;
        }

        .input-area {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        input {
            flex: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
        }

        button {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            font-weight: bold;
        }

        .send-btn {
            background: #667eea;
            color: white;
        }

        .connect-btn {
            background: #48bb78;
            color: white;
            width: 100%;
        }

        button:hover:not(:disabled) {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <h1>🚀 Simple P2P Chat</h1>
        
        <div id="status" class="status disconnected">
            Ready to connect
        </div>

        <div id="messages" class="messages">
            <div class="message system">Welcome! Click "Start Chat" to begin.</div>
        </div>

        <div class="input-area">
            <input type="text" id="messageInput" placeholder="Type your message..." disabled>
            <button id="sendBtn" class="send-btn" disabled>Send</button>
        </div>

        <button id="connectBtn" class="connect-btn">Start Chat</button>
    </div>

    <script>
        console.log('🚀 Simple P2P Chat starting...');
        
        class SimplePeerChat {
            constructor() {
                console.log('📱 Initializing SimplePeerChat');
                
                this.userId = this.generateId();
                this.partnerId = null;
                this.isConnected = false;
                
                this.initElements();
                this.bindEvents();
                
                console.log('✅ SimplePeerChat initialized with ID:', this.userId);
            }

            generateId() {
                return 'user_' + Math.random().toString(36).substr(2, 9);
            }

            initElements() {
                this.statusEl = document.getElementById('status');
                this.messagesEl = document.getElementById('messages');
                this.messageInput = document.getElementById('messageInput');
                this.sendBtn = document.getElementById('sendBtn');
                this.connectBtn = document.getElementById('connectBtn');
                
                console.log('🔧 Elements initialized');
            }

            bindEvents() {
                this.connectBtn.onclick = () => this.startChat();
                this.sendBtn.onclick = () => this.sendMessage();
                
                this.messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.sendMessage();
                    }
                });
                
                console.log('🔗 Events bound');
            }

            updateStatus(message, type = 'disconnected') {
                this.statusEl.textContent = message;
                this.statusEl.className = `status ${type}`;
                console.log(`📊 Status: ${message} (${type})`);
            }

            addMessage(content, type = 'system') {
                const messageEl = document.createElement('div');
                messageEl.className = `message ${type}`;
                messageEl.textContent = content;
                this.messagesEl.appendChild(messageEl);
                this.messagesEl.scrollTop = this.messagesEl.scrollHeight;
                
                console.log(`💬 Message added: ${content} (${type})`);
            }

            startChat() {
                console.log('🔍 Starting chat...');
                this.updateStatus('Looking for someone to chat with...', 'connecting');
                this.connectBtn.disabled = true;
                
                // Simulate finding a partner after 2 seconds
                setTimeout(() => {
                    this.simulateConnection();
                }, 2000);
            }

            simulateConnection() {
                console.log('🎯 Simulating connection...');
                this.partnerId = 'partner_' + Math.random().toString(36).substr(2, 9);
                this.isConnected = true;
                
                this.updateStatus('Connected! Start chatting.', 'connected');
                this.addMessage('Connected to a stranger. Say hello! 👋', 'system');
                
                this.messageInput.disabled = false;
                this.sendBtn.disabled = false;
                this.connectBtn.textContent = 'Disconnect';
                this.connectBtn.disabled = false;
                this.connectBtn.onclick = () => this.disconnect();
                
                this.messageInput.focus();
                
                // Simulate receiving messages
                this.simulatePartnerMessages();
            }

            simulatePartnerMessages() {
                const responses = [
                    "Hello! How are you doing today?",
                    "Nice to meet you! 😊",
                    "That's interesting! Tell me more.",
                    "I'm doing well, thanks for asking!",
                    "What's your favorite hobby?",
                    "This chat app is pretty cool!",
                    "Where are you from?",
                    "Have a great day! 👋"
                ];

                let messageCount = 0;
                const maxMessages = 4;

                const sendRandomMessage = () => {
                    if (!this.isConnected || messageCount >= maxMessages) return;
                    
                    const randomDelay = 3000 + Math.random() * 5000; // 3-8 seconds
                    
                    setTimeout(() => {
                        if (this.isConnected) {
                            const response = responses[Math.floor(Math.random() * responses.length)];
                            this.addMessage(response, 'received');
                            messageCount++;
                            sendRandomMessage();
                        }
                    }, randomDelay);
                };

                // Send first message after 5 seconds
                setTimeout(() => {
                    if (this.isConnected) {
                        sendRandomMessage();
                    }
                }, 5000);
            }

            sendMessage() {
                const message = this.messageInput.value.trim();
                if (!message || !this.isConnected) return;

                this.addMessage(message, 'sent');
                this.messageInput.value = '';
                
                console.log(`📤 Message sent: ${message}`);
            }

            disconnect() {
                console.log('🔌 Disconnecting...');
                this.isConnected = false;
                this.partnerId = null;
                
                this.updateStatus('Disconnected', 'disconnected');
                this.addMessage('Disconnected from chat', 'system');
                
                this.messageInput.disabled = true;
                this.sendBtn.disabled = true;
                this.connectBtn.textContent = 'Start Chat';
                this.connectBtn.onclick = () => this.startChat();
            }
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', () => {
            console.log('🌟 DOM loaded, starting app...');
            
            try {
                window.chat = new SimplePeerChat();
                console.log('✅ App started successfully!');
            } catch (error) {
                console.error('❌ Failed to start app:', error);
                document.getElementById('status').innerHTML = `❌ Error: ${error.message}`;
            }
        });

        // Global error handler
        window.addEventListener('error', (event) => {
            console.error('🚨 Global error:', event.error);
            document.getElementById('status').innerHTML = `❌ Error: ${event.message}`;
        });
    </script>
</body>
</html>
